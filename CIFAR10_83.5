{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "toc_visible": true,
      "authorship_tag": "ABX9TyPh1UMDXPpnrF3hPaWyu0Sg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dawsong1011/ML-stuff/blob/main/CIFAR10_83.5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZEE_iq1q3pRZ",
        "outputId": "b981c2d0-4498-4bbe-e715-34132eedab10"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170498071/170498071 [==============================] - 2s 0us/step\n",
            "Epoch 1/45\n",
            "1562/1562 [==============================] - 59s 29ms/step - loss: 1.6116 - accuracy: 0.4169 - precision: 0.6213 - recall: 0.2103 - val_loss: 1.3623 - val_accuracy: 0.5231 - val_precision: 0.6502 - val_recall: 0.4075\n",
            "Epoch 2/45\n",
            "1562/1562 [==============================] - 43s 28ms/step - loss: 1.2451 - accuracy: 0.5596 - precision: 0.7231 - recall: 0.3879 - val_loss: 1.0259 - val_accuracy: 0.6317 - val_precision: 0.7577 - val_recall: 0.5131\n",
            "Epoch 3/45\n",
            "1562/1562 [==============================] - 43s 27ms/step - loss: 1.0672 - accuracy: 0.6263 - precision: 0.7642 - recall: 0.4886 - val_loss: 1.1480 - val_accuracy: 0.6293 - val_precision: 0.7418 - val_recall: 0.5432\n",
            "Epoch 4/45\n",
            "1562/1562 [==============================] - 43s 28ms/step - loss: 0.9703 - accuracy: 0.6626 - precision: 0.7800 - recall: 0.5444 - val_loss: 0.8824 - val_accuracy: 0.6860 - val_precision: 0.7628 - val_recall: 0.6159\n",
            "Epoch 5/45\n",
            "1562/1562 [==============================] - 44s 28ms/step - loss: 0.9076 - accuracy: 0.6842 - precision: 0.7933 - recall: 0.5806 - val_loss: 1.1187 - val_accuracy: 0.6350 - val_precision: 0.7006 - val_recall: 0.5698\n",
            "Epoch 6/45\n",
            "1562/1562 [==============================] - 43s 28ms/step - loss: 0.8554 - accuracy: 0.7032 - precision: 0.8048 - recall: 0.6071 - val_loss: 0.7673 - val_accuracy: 0.7408 - val_precision: 0.8141 - val_recall: 0.6713\n",
            "Epoch 7/45\n",
            "1562/1562 [==============================] - 44s 28ms/step - loss: 0.8169 - accuracy: 0.7173 - precision: 0.8142 - recall: 0.6298 - val_loss: 0.7399 - val_accuracy: 0.7475 - val_precision: 0.8202 - val_recall: 0.6875\n",
            "Epoch 8/45\n",
            "1562/1562 [==============================] - 44s 28ms/step - loss: 0.7776 - accuracy: 0.7338 - precision: 0.8209 - recall: 0.6502 - val_loss: 0.8439 - val_accuracy: 0.7208 - val_precision: 0.7929 - val_recall: 0.6691\n",
            "Epoch 9/45\n",
            "1562/1562 [==============================] - 43s 28ms/step - loss: 0.7549 - accuracy: 0.7400 - precision: 0.8238 - recall: 0.6633 - val_loss: 0.6991 - val_accuracy: 0.7660 - val_precision: 0.8276 - val_recall: 0.7161\n",
            "Epoch 10/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.7324 - accuracy: 0.7485 - precision: 0.8298 - recall: 0.6710 - val_loss: 0.8092 - val_accuracy: 0.7296 - val_precision: 0.7940 - val_recall: 0.6826\n",
            "Epoch 11/45\n",
            "1562/1562 [==============================] - 46s 29ms/step - loss: 0.7126 - accuracy: 0.7578 - precision: 0.8357 - recall: 0.6852 - val_loss: 0.8230 - val_accuracy: 0.7267 - val_precision: 0.7759 - val_recall: 0.6829\n",
            "Epoch 12/45\n",
            "1562/1562 [==============================] - 46s 29ms/step - loss: 0.6914 - accuracy: 0.7629 - precision: 0.8407 - recall: 0.6964 - val_loss: 0.7232 - val_accuracy: 0.7589 - val_precision: 0.8098 - val_recall: 0.7167\n",
            "Epoch 13/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.6792 - accuracy: 0.7672 - precision: 0.8423 - recall: 0.6975 - val_loss: 0.5730 - val_accuracy: 0.8083 - val_precision: 0.8600 - val_recall: 0.7639\n",
            "Epoch 14/45\n",
            "1562/1562 [==============================] - 46s 29ms/step - loss: 0.6644 - accuracy: 0.7734 - precision: 0.8446 - recall: 0.7073 - val_loss: 0.5952 - val_accuracy: 0.7960 - val_precision: 0.8491 - val_recall: 0.7563\n",
            "Epoch 15/45\n",
            "1562/1562 [==============================] - 44s 28ms/step - loss: 0.6528 - accuracy: 0.7775 - precision: 0.8475 - recall: 0.7126 - val_loss: 0.5801 - val_accuracy: 0.8045 - val_precision: 0.8558 - val_recall: 0.7581\n",
            "Epoch 16/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.6393 - accuracy: 0.7825 - precision: 0.8526 - recall: 0.7217 - val_loss: 0.5688 - val_accuracy: 0.8113 - val_precision: 0.8510 - val_recall: 0.7767\n",
            "Epoch 17/45\n",
            "1562/1562 [==============================] - 46s 30ms/step - loss: 0.6319 - accuracy: 0.7841 - precision: 0.8492 - recall: 0.7255 - val_loss: 0.5628 - val_accuracy: 0.8073 - val_precision: 0.8560 - val_recall: 0.7707\n",
            "Epoch 18/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.6222 - accuracy: 0.7860 - precision: 0.8518 - recall: 0.7272 - val_loss: 0.5352 - val_accuracy: 0.8203 - val_precision: 0.8663 - val_recall: 0.7850\n",
            "Epoch 19/45\n",
            "1562/1562 [==============================] - 46s 29ms/step - loss: 0.6102 - accuracy: 0.7936 - precision: 0.8569 - recall: 0.7358 - val_loss: 0.6346 - val_accuracy: 0.7921 - val_precision: 0.8343 - val_recall: 0.7591\n",
            "Epoch 20/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.6046 - accuracy: 0.7953 - precision: 0.8576 - recall: 0.7390 - val_loss: 0.4813 - val_accuracy: 0.8351 - val_precision: 0.8815 - val_recall: 0.7969\n",
            "Epoch 21/45\n",
            "1562/1562 [==============================] - 47s 30ms/step - loss: 0.5953 - accuracy: 0.7969 - precision: 0.8592 - recall: 0.7404 - val_loss: 0.4910 - val_accuracy: 0.8310 - val_precision: 0.8736 - val_recall: 0.7952\n",
            "Epoch 22/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.5855 - accuracy: 0.8013 - precision: 0.8612 - recall: 0.7472 - val_loss: 0.6358 - val_accuracy: 0.7924 - val_precision: 0.8329 - val_recall: 0.7647\n",
            "Epoch 23/45\n",
            "1562/1562 [==============================] - 47s 30ms/step - loss: 0.5821 - accuracy: 0.8024 - precision: 0.8616 - recall: 0.7496 - val_loss: 0.5136 - val_accuracy: 0.8263 - val_precision: 0.8642 - val_recall: 0.7943\n",
            "Epoch 24/45\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.5778 - accuracy: 0.8039 - precision: 0.8630 - recall: 0.7505 - val_loss: 0.5062 - val_accuracy: 0.8268 - val_precision: 0.8690 - val_recall: 0.7958\n",
            "Epoch 25/45\n",
            "1562/1562 [============================>.] - ETA: 0s - loss: 0.5688 - accuracy: 0.8056 - precision: 0.8640 - recall: 0.7534Restoring model weights from the end of the best epoch: 20.\n",
            "1562/1562 [==============================] - 45s 29ms/step - loss: 0.5688 - accuracy: 0.8056 - precision: 0.8640 - recall: 0.7533 - val_loss: 0.6111 - val_accuracy: 0.7960 - val_precision: 0.8348 - val_recall: 0.7657\n",
            "Epoch 25: early stopping\n",
            "313/313 [==============================] - 2s 5ms/step - loss: 0.4813 - accuracy: 0.8351 - precision: 0.8815 - recall: 0.7969\n",
            "Test accuracy: 0.835099995136261\n",
            "Test precision: 0.881526529788971\n",
            "Test recall: 0.7968999743461609\n"
          ]
        }
      ],
      "source": [
        "# Importing necessary libraries\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten,Conv2D, MaxPooling2D, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.metrics import Precision, Recall\n",
        "from tensorflow.keras.layers import BatchNormalization, Activation\n",
        "from tensorflow.keras.callbacks import LearningRateScheduler\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "import math\n",
        "\n",
        "\n",
        "\n",
        "# Loading the dataset\n",
        "(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()\n",
        "\n",
        "# Preprocessing the data\n",
        "train_images = train_images / 255.0\n",
        "test_images = test_images / 255.0\n",
        "train_labels = to_categorical(train_labels)\n",
        "test_labels = to_categorical(test_labels)\n",
        "\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range=15,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    horizontal_flip=True,\n",
        "    zoom_range=0.2\n",
        ")\n",
        "datagen.fit(train_images)\n",
        "\n",
        "\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)\n",
        "\n",
        "\n",
        "callbacks = [early_stopping]\n",
        "\n",
        "# Building the model\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3, 3), padding='same', input_shape=(32, 32, 3)),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Conv2D(32, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.25),\n",
        "\n",
        "    Conv2D(64, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Conv2D(64, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.225),\n",
        "\n",
        "    Conv2D(64, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Conv2D(64, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Dropout(.2),\n",
        "\n",
        "    Conv2D(32, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Conv2D(32, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Dropout(.175),\n",
        "\n",
        "    Conv2D(128, (3, 3), padding='same'),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Dropout(0.3),\n",
        "\n",
        "    Flatten(),\n",
        "    Dense(128),\n",
        "    BatchNormalization(),\n",
        "    Activation('relu'),\n",
        "    Dropout(0.25),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy', Precision(), Recall()])\n",
        "\n",
        "# Train the model with data augmentation\n",
        "model.fit(datagen.flow(train_images, train_labels, batch_size=32),\n",
        "          steps_per_epoch=len(train_images) / 32, epochs=45,\n",
        "          validation_data=(test_images, test_labels),\n",
        "          callbacks=callbacks)\n",
        "\n",
        "# Evaluating the model\n",
        "\n",
        "test_loss, test_acc, test_precision, test_recall  = model.evaluate(test_images, test_labels)\n",
        "print('Test accuracy:', test_acc)\n",
        "print('Test precision:', test_precision)\n",
        "print('Test recall:', test_recall)"
      ]
    }
  ]
}